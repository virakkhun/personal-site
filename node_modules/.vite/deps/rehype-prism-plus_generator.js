import {
  visit
} from "./chunk-VGG62YDC.js";
import {
  convert
} from "./chunk-6XJW5YQ2.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ZC22LKFR.js";

// node_modules/parse-numeric-range/index.js
var require_parse_numeric_range = __commonJS({
  "node_modules/parse-numeric-range/index.js"(exports, module) {
    function parsePart(string) {
      let res = [];
      let m;
      for (let str of string.split(",").map((str2) => str2.trim())) {
        if (/^-?\d+$/.test(str)) {
          res.push(parseInt(str, 10));
        } else if (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/)) {
          let [_, lhs, sep, rhs] = m;
          if (lhs && rhs) {
            lhs = parseInt(lhs);
            rhs = parseInt(rhs);
            const incr = lhs < rhs ? 1 : -1;
            if (sep === "-" || sep === ".." || sep === "â€¥")
              rhs += incr;
            for (let i2 = lhs; i2 !== rhs; i2 += incr)
              res.push(i2);
          }
        }
      }
      return res;
    }
    exports.default = parsePart;
    module.exports = parsePart;
  }
});

// node_modules/hast-util-to-string/index.js
function toString(node) {
  if ("children" in node) {
    return all(node);
  }
  return "value" in node ? node.value : "";
}
function one(node) {
  if (node.type === "text") {
    return node.value;
  }
  return "children" in node ? all(node) : "";
}
function all(node) {
  let index = -1;
  const result = [];
  while (++index < node.children.length) {
    result[index] = one(node.children[index]);
  }
  return result.join("");
}

// node_modules/unist-util-filter/lib/index.js
var own = {}.hasOwnProperty;
var filter = (
  /**
   * @type {(
   *  (<Tree extends Node, Check extends Test>(node: Tree, options: Options | null | undefined, test: Check | null | undefined) => import('./complex-types.js').Matches<Tree, Check>) &
   *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types.js').Matches<Tree, Check>) &
   *  (<Tree extends Node>(node: Tree, options?: Options | null | undefined) => Tree)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Options | Test | null | undefined} [options]
   * @param {Test | null | undefined} [test]
   * @returns {Node | null}
   */
  function(tree, options, test) {
    const is = convert(test || options);
    const cascadeRaw = options && typeof options === "object" && "cascade" in options ? (
      /** @type {boolean | null | undefined} */
      options.cascade
    ) : void 0;
    const cascade = cascadeRaw === void 0 || cascadeRaw === null ? true : cascadeRaw;
    return preorder(tree);
    function preorder(node, index, parent) {
      const children = [];
      if (!is(node, index, parent))
        return null;
      if (node.children) {
        let childIndex = -1;
        while (++childIndex < node.children.length) {
          const result = preorder(node.children[childIndex], childIndex, node);
          if (result) {
            children.push(result);
          }
        }
        if (cascade && node.children.length > 0 && children.length === 0)
          return null;
      }
      const next = {};
      let key;
      for (key in node) {
        if (own.call(node, key)) {
          next[key] = key === "children" ? children : node[key];
        }
      }
      return next;
    }
  }
);

// node_modules/rehype-prism-plus/dist/generator.es.js
var import_parse_numeric_range = __toESM(require_parse_numeric_range());
function i() {
  i = function(e2, r2) {
    return new t(e2, void 0, r2);
  };
  var e = RegExp.prototype, r = /* @__PURE__ */ new WeakMap();
  function t(e2, n3, i2) {
    var l2 = new RegExp(e2, n3);
    return r.set(l2, i2 || r.get(e2)), o(l2, t.prototype);
  }
  function n2(e2, t2) {
    var n3 = r.get(t2);
    return Object.keys(n3).reduce(function(r2, t3) {
      var i2 = n3[t3];
      if ("number" == typeof i2)
        r2[t3] = e2[i2];
      else {
        for (var o2 = 0; void 0 === e2[i2[o2]] && o2 + 1 < i2.length; )
          o2++;
        r2[t3] = e2[i2[o2]];
      }
      return r2;
    }, /* @__PURE__ */ Object.create(null));
  }
  return function(e2, r2) {
    if ("function" != typeof r2 && null !== r2)
      throw new TypeError("Super expression must either be null or a function");
    e2.prototype = Object.create(r2 && r2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), r2 && o(e2, r2);
  }(t, RegExp), t.prototype.exec = function(r2) {
    var t2 = e.exec.call(this, r2);
    if (t2) {
      t2.groups = n2(t2, this);
      var i2 = t2.indices;
      i2 && (i2.groups = n2(i2, this));
    }
    return t2;
  }, t.prototype[Symbol.replace] = function(t2, i2) {
    if ("string" == typeof i2) {
      var o2 = r.get(this);
      return e[Symbol.replace].call(this, t2, i2.replace(/\$<([^>]+)>/g, function(e2, r2) {
        var t3 = o2[r2];
        return "$" + (Array.isArray(t3) ? t3.join("$") : t3);
      }));
    }
    if ("function" == typeof i2) {
      var l2 = this;
      return e[Symbol.replace].call(this, t2, function() {
        var e2 = arguments;
        return "object" != typeof e2[e2.length - 1] && (e2 = [].slice.call(e2)).push(n2(e2, l2)), i2.apply(this, e2);
      });
    }
    return e[Symbol.replace].call(this, t2, i2);
  }, i.apply(this, arguments);
}
function o(e, r) {
  return o = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e2, r2) {
    return e2.__proto__ = r2, e2;
  }, o(e, r);
}
function l(e, r) {
  (null == r || r > e.length) && (r = e.length);
  for (var t = 0, n2 = new Array(r); t < r; t++)
    n2[t] = e[t];
  return n2;
}
function a(e, r) {
  var t = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
  if (t)
    return (t = t.call(e)).next.bind(t);
  if (Array.isArray(e) || (t = function(e2, r2) {
    if (e2) {
      if ("string" == typeof e2)
        return l(e2, r2);
      var t2 = Object.prototype.toString.call(e2).slice(8, -1);
      return "Object" === t2 && e2.constructor && (t2 = e2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(e2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? l(e2, r2) : void 0;
    }
  }(e)) || r && e && "number" == typeof e.length) {
    t && (e = t);
    var n2 = 0;
    return function() {
      return n2 >= e.length ? { done: true } : { done: false, value: e[n2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var s = function(o2) {
  return function(l2) {
    return void 0 === l2 && (l2 = {}), function(e, r) {
      if (r && !e.registered(r))
        throw new Error('The default language "' + r + '" is not registered with refractor.');
    }(o2, l2.defaultLanguage), function(r) {
      visit(r, "element", s2);
    };
    function s2(e, s3, u) {
      var c, p;
      if (u && "pre" === u.tagName && "code" === e.tagName) {
        var f = (null == e || null == (c = e.data) ? void 0 : c.meta) || (null == e || null == (p = e.properties) ? void 0 : p.metastring) || "";
        e.properties.className ? "boolean" == typeof e.properties.className ? e.properties.className = [] : Array.isArray(e.properties.className) || (e.properties.className = [e.properties.className]) : e.properties.className = [];
        var m, h, d = function(e2) {
          for (var r, t = a(e2.properties.className); !(r = t()).done; ) {
            var n2 = r.value;
            if ("language-" === n2.slice(0, 9))
              return n2.slice(9).toLowerCase();
          }
          return null;
        }(e);
        if (!d && l2.defaultLanguage && e.properties.className.push("language-" + (d = l2.defaultLanguage)), e.properties.className.push("code-highlight"), d)
          try {
            var g, v;
            v = null != (g = d) && g.includes("diff-") ? d.split("-")[1] : d, m = o2.highlight(toString(e), v), u.properties.className = (u.properties.className || []).concat("language-" + v);
          } catch (r) {
            if (!l2.ignoreMissing || !/Unknown language/.test(r.message))
              throw r;
            m = e;
          }
        else
          m = e;
        m.children = (h = 1, function e2(r) {
          return r.reduce(function(r2, t) {
            if ("text" === t.type) {
              var n2 = t.value, i2 = (n2.match(/\n/g) || "").length;
              if (0 === i2)
                t.position = { start: { line: h, column: 1 }, end: { line: h, column: 1 } }, r2.push(t);
              else
                for (var o3, l3 = n2.split("\n"), s4 = a(l3.entries()); !(o3 = s4()).done; ) {
                  var u2 = o3.value, c2 = u2[0], p2 = u2[1];
                  r2.push({ type: "text", value: c2 === l3.length - 1 ? p2 : p2 + "\n", position: { start: { line: h + c2, column: 1 }, end: { line: h + c2, column: 1 } } });
                }
              return h += i2, r2;
            }
            if (Object.prototype.hasOwnProperty.call(t, "children")) {
              var f2 = h;
              return t.children = e2(t.children), r2.push(t), t.position = { start: { line: f2, column: 1 }, end: { line: h, column: 1 } }, r2;
            }
            return r2.push(t), r2;
          }, []);
        })(m.children), m.position = m.children.length > 0 ? { start: { line: m.children[0].position.start.line, column: 0 }, end: { line: m.children[m.children.length - 1].position.end.line, column: 0 } } : { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } };
        for (var y, b = function(e2) {
          var r = /{([\d,-]+)}/, t = e2.split(",").map(function(e3) {
            return e3.trim();
          }).join();
          if (r.test(t)) {
            var i2 = r.exec(t)[1], o3 = (0, import_parse_numeric_range.default)(i2);
            return function(e3) {
              return o3.includes(e3 + 1);
            };
          }
          return function() {
            return false;
          };
        }(f), w = function(e2) {
          var r = i(/showLineNumbers=(\d+)/i, { lines: 1 });
          if (r.test(e2)) {
            var t = r.exec(e2);
            return Number(t.groups.lines);
          }
          return 1;
        }(f), N = function(e2) {
          for (var r = new Array(e2), t = 0; t < e2; t++)
            r[t] = { type: "element", tagName: "span", properties: { className: [] }, children: [] };
          return r;
        }(m.position.end.line), j = ["showlinenumbers=false", 'showlinenumbers="false"', "showlinenumbers={false}"], x = function() {
          var e2, n2, i2 = y.value, o3 = i2[0], a2 = i2[1];
          a2.properties.className = ["code-line"];
          var s4 = filter(m, function(e3) {
            return e3.position.start.line <= o3 + 1 && e3.position.end.line >= o3 + 1;
          });
          a2.children = s4.children, !f.toLowerCase().includes("showLineNumbers".toLowerCase()) && !l2.showLineNumbers || j.some(function(e3) {
            return f.toLowerCase().includes(e3);
          }) || (a2.properties.line = [(o3 + w).toString()], a2.properties.className.push("line-number")), b(o3) && a2.properties.className.push("highlight-line"), ("diff" === d || null != (e2 = d) && e2.includes("diff-")) && "-" === toString(a2).substring(0, 1) ? a2.properties.className.push("deleted") : ("diff" === d || null != (n2 = d) && n2.includes("diff-")) && "+" === toString(a2).substring(0, 1) && a2.properties.className.push("inserted");
        }, O = a(N.entries()); !(y = O()).done; )
          x();
        N.length > 0 && "" === toString(N[N.length - 1]).trim() && N.pop(), e.children = N;
      }
    }
  };
};
export {
  s as default
};
//# sourceMappingURL=rehype-prism-plus_generator.js.map
